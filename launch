#!/bin/bash
set -eou pipefail

ctl_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
root_dir="$(cd "$(dirname "$ctl_dir")" && pwd)"

CYAN='\033[0;36m'
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m' # No Color

function error {
	msg="$(date '+%F %T') - ${BASH_SOURCE[0]}: line ${BASH_LINENO[0]}: ${*}"
	>&2 echo -e "${RED}${msg}${NC}"
	exit 2
}

args=()
debug=()

# shellcheck disable=SC2214
while getopts ':defp-:' OPT; do
	if [ "$OPT" = "-" ]; then     # long option: reformulate OPT and OPTARG
		OPT="${OPTARG%%=*}"       # extract long option name
		OPTARG="${OPTARG#$OPT}"   # extract long option argument (may be empty)
		OPTARG="${OPTARG#=}"      # if long option argument, remove assigning `=`
	fi
	case "$OPT" in
		d|dev ) dev="true";;
		e|enter ) enter="true";;
		f|fast ) fast="true"; args+=( "--fast" );;
		p|prepare ) prepare="true"; args+=( "--prepare" );;
		debug ) debug=( "-vvvvv" ); args+=( "--debug" );;
		no-vault ) no_vault="true";;
		\? ) error "[error] unknown short option: -${OPTARG:-}";;
		?* ) error "[error] unknown long option: --${OPT:-}";;
	esac
done
shift $((OPTIND-1))

project="${1:-}"
ctl_title="[ctl]"

if [ "${dev:-}" = "true" ]; then
	ctl_title="[ctl - dev mode]"
fi

start="$(date '+%F %T')"
echo -e "${CYAN}$start $ctl_title [start] running the project ($project)${NC}"

if [ -z "$project" ]; then
	echo "[error] $ctl_title enter the project name"
	exit 2
fi

shift;

if [ -n "${1:-}" ]; then
	args+=( "--" );
fi

if [ "${dev:-}" = 'true' ]; then
    ln -rsfT "${root_dir}" "${root_dir}/link"
fi

secrets_dir_rel="secrets/projects/$project"
secrets_dir="$root_dir/$secrets_dir_rel"
secrets_dir_container="/main/$secrets_dir_rel"

vault=()

if [ "${no_vault:-}" != "true" ]; then
	mkdir -p "$secrets_dir"

	vault_file="$secrets_dir/vault"

	if [ ! -f "$vault_file" ]; then
		echo -n "Enter the main vault pass (to decrypt the ssh keys of the environment repositories): "
		read -r -s vault_pass
		echo

		touch "$vault_file"
		chmod 600 "$vault_file"
		echo "$vault_pass" > "$vault_file"
	fi

	vault=( '--vault-id' "$secrets_dir_container/vault" )
fi

# shellcheck source=SCRIPTDIR/env-main/env.sh
# shellcheck disable=SC1091
source "${ctl_dir}/env-main/env.sh"

# shellcheck disable=SC2154
var_container="$container"
var_container_type="${container_type:-}"
var_root="${root:-}"

if [ "$var_container_type" = "" ]; then
	var_container_type="docker"
fi

if [ "$var_container_type" != 'docker' ] && [ "$var_container_type" != 'podman' ]; then
    echo "[error] $ctl_title unsupported container type: $var_container_type"
    exit 2
fi

cmd=( "$var_container_type" )

if [ "$var_root" = 'true' ]; then
    cmd=( sudo "$var_container_type" )
fi

if [ "${fast:-}" = 'true' ]; then
	echo "$ctl_title skipping init project (fast)..."
else
    prepare_args=()
	skip=''

    if [ "${prepare:-}" = 'true' ]; then
		if [ "${1:-}" = "--skip" ]; then
			skip='true';
			shift;
		else
			for arg in "$@"; do
				shift;

				if [ "$arg" = "--" ]; then
					break;
				fi

				prepare_args+=( "$arg" )
			done
		fi
    fi

	if [ "${skip:-}" = 'true' ]; then
		echo "$ctl_title skipping init project (skip)..."
	else
		inner_cmd=( \
			ansible-playbook \
			${vault[@]+"${vault[@]}"} \
			${debug[@]+"${debug[@]}"} \
			-i "/main/ctl/ansible/hosts" \
			--extra-vars "env_project_key=$project" \
			--extra-vars "env_root_dir=$root_dir" \
			--extra-vars "env_dev=${dev:-}" \
			ansible/main.yml \
			${prepare_args[@]+"${prepare_args[@]}"} \
		)

		if [ "${enter:-}" = 'true' ]; then
			mkdir -p "$ctl_dir/tmp"
			echo "${inner_cmd[@]+"${inner_cmd[*]}"}" > "$ctl_dir/tmp/cmd"
			inner_cmd=( /bin/bash )
		fi

		"${cmd[@]}" run --rm -it \
			--name="local-ctl-init-$project" \
			--workdir "/main/ctl" \
			-v "${ctl_dir}:/main/ctl:ro" \
			-v "${root_dir}/secrets:/main/secrets" \
			-v "${root_dir}/projects:/main/projects" \
			-e "ANSIBLE_CONFIG=/main/ctl/ansible/ansible.cfg" \
			"$var_container" \
			${inner_cmd[@]+"${inner_cmd[@]}"} \
			|| error "[error] $ctl_title project $project - init"
	fi
fi

if [ "${enter:-}" != 'true' ]; then
	bash "${root_dir}/projects/$project/files/ctl/run" \
		${args[@]+"${args[@]}"} "${@}" \
		|| error "[error] $ctl_title project $project - run"
fi

end="$(date '+%F %T')"
echo -e "${CYAN}$end $ctl_title [end] running the project ($project)${NC}"

echo -e "${GREEN}$ctl_title [project - $project] [run] summary - $start to $end ${NC}"
