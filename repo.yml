- name: "{{ repo.name }} - set_fact"
  set_fact: 
    repo_dest: "{{ env.repo_base_dest_workspace }}/{{ repo.local_repo }}"
    env_repo: "{{ (repo.global_env_repo | default(false)) | ternary(env.env_repo, repo.env_repo) }}"
    repo_base_dir_pod: "/main/pod"
    repo_base_dir_app: "/main/app"
    repo_env_dev_dir_base: "/main/env"
  tags: ["other"]

- name: "{{ repo.name }} - set_fact"
  set_fact: 
    repo_private: "{{ env_repo.private | default(false) }}"
    repo_env_dir: >-
      {{ 
      ((lookup('env', 'DEV') == '1') and ((repo.env_dev_dir | default('')) != ''))
      | ternary(repo_env_dev_dir_base +'/' + (repo.env_dev_dir | default('')), repo_dest + '/env')
      }}
  tags: ["other"]

- name: "{{ repo.name }} - set_fact"
  set_fact: 
    repo_key_file: >-
      {{ 
      (repo_private | bool) | 
      ternary(repo_dest + '/var/repo.key_file', None) | 
      default(omit) 
      }}
  tags: ["other"]

- name: "{{ repo.name }} - create the directories in {{ repo_dest }}"
  file:
    path: "{{ repo_item }}"
    state: directory
    mode: 0755
  loop: 
  - "{{ env.repo_base_dest }}/var"
  - "{{ repo_dest }}/env"
  - "{{ repo_dest }}/var"
  - "{{ repo_dest }}/tmp"
  loop_control:
    loop_var: repo_item
  tags: ["other"]

- name: "{{ repo.name }} - copy encrypted file to set location"
  copy:
    src: "env/{{ env_repo.key_file_encrypted }}"
    dest: "{{ repo_key_file }}"
    decrypt: yes
    mode: 0600
  when: (repo_private | bool)
  tags: ["other"]
  
- name: "{{ repo.name }} - create file to verify idempotence (if there is still no file)"
  copy: 
    force: no
    content: ""
    dest: "{{ repo_dest }}/var/{{ repo.env_file }}"
    mode: 0600
  tags: ["other"]
  
- name: "{{ repo.name }} - download the workspace environment repo"
  git:
    repo: "{{ env_repo.source }}"
    version: "{{ env_repo.version }}"
    dest: "{{ repo_dest }}/env"
    key_file: "{{ repo_key_file }}"
    accept_hostkey: yes
    update: yes
    force: yes
  tags: ["other", "print_action"]
  
- name: "{{ repo.name }} - download the workspace environment repo for real-time development (1st time)"
  git:
    repo: "{{ env_repo.source }}"
    version: "{{ env_repo.version }}"
    dest: "{{ repo_env_dir }}"
    key_file: "{{ repo_key_file }}"
    accept_hostkey: yes
    update: no
  when: (lookup('env', 'DEV') == '1') and ((repo.env_dev_dir | default('')) != '')
  tags: ["other"]

- name: "{{ repo.name }} - copy the temporary hosts file to verify changes"
  copy:
    src: "{{ env.cloud_repo_dest }}/hosts"
    dest: "{{ repo_dest }}/var/hosts.tmp"
    mode: 0600
  register: diff_hosts
  tags: ["other"]

- name: load environment vars
  include_vars:
    file: "{{ repo_env_dir }}/{{ repo.env_file }}"
    name: repo_env
  tags: ["other"]

- name: "{{ repo.name }} - verify if it will create a specific main repository"
  set_fact:
    repo_specific: >-
      {{
      (
      (repo_env.cloud.repo is defined) 
      and 
      (repo_env.cloud.repo != env.cloud_repo)
      and 
      ((repo_env.cloud.repo + '.git') != env.cloud_repo)
      and 
      (repo_env.cloud.repo != (env.cloud_repo + '.git'))
      )
      or
      (
      (repo_env.cloud.repo_version is defined) 
      and 
      (repo_env.cloud.repo_version != env.cloud_repo_version)
      )
      }}
  tags: ["other"]

- name: "{{ repo.name }} - set_fact - repo_cloud_repo_dest"
  set_fact:
    repo_cloud_repo_dest: >-
      {{ 
      repo_specific | 
      ternary(repo_dest + '/cloud', env.cloud_repo_dest) 
      }}
  tags: ["other"]

- name: "{{ repo.name }} - update specific cloud repo if there is one specified"
  git:
    repo: "{{ repo_env.cloud.repo | default(env.cloud_repo) }}"
    version: "{{ repo_env.cloud.repo_version | default(env.cloud_repo_version) }}"
    dest: "{{ repo_dest }}/cloud"
    update: yes
    force: no
  when: repo_specific | bool
  tags: ["other"]

- name: "{{ repo.name }} - copy the hosts file when changed"
  copy:
    src: "{{ env.cloud_repo_dest }}/hosts"
    dest: "{{ repo_dest }}/var/hosts"
    mode: 0600
  when: diff_hosts.changed
  tags: ["other"]

- name: "{{ repo.name }} - copy the executable files"
  template:
    src: "templates/run.tpl.sh"
    dest: "{{ repo_dest }}/{{ repo_item.name }}"
    mode: 0700
  vars:
    repo_run_force: "{{ repo_item.force }}"
    repo_force_vault: "{{ env_repo.force_vault and not (repo_item.dev | default(false) | bool) }}"
  loop:
  - { name: "run", force: "true" }
  - { name: "upgrade", force: "false" }
  - { name: "dev", force: "true", dev: true }
  loop_control:
    loop_var: repo_item
  when: >-
    (not (repo_item.dev | default(false) | bool)) 
    or 
    ((repo.env_dev_dir | default('')) != '')
  tags: ["other"]

- name: "{{ repo.name }} - copy the vault file"
  copy:
    src: "env/{{ env_repo.vault_file }}"
    dest: "{{ repo_dest }}/var/vault"
    decrypt: yes
    mode: 0600
  when: (env_repo.vault_file | default('')) != ''
  tags: ["other"]
  
- name: "{{ repo.name }} - execute the commands of the local repositories (dev)"
  command: "{{ env.repo_base_dest_workspace }}/{{ repo.local_repo }}/dev"
  when: >-
    ((repo.type | default('')) == 'local')
    and
    (lookup('env', 'DEV') == '1') and ((repo.env_dev_dir | default('')) != '')
  tags: ["never", "local"]