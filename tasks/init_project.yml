- name: "[ctl] [project] - {{ project.name }} - define title"
  set_fact:
    project_title: "[ctl] [project] - {{ project.name }}"

- name: "{{ project_title }} - verify the project repo params"
  fail:
    msg: "{{ project_item.name }} not specified for the project environment"
  when: (project_item.value | default('')) == ''
  loop:
  - { name: "env_project_key", value: "{{ env_project_key | default('') }}"}
  - { name: "env_root_dir", value: "{{ env_root_dir | default('') }}"}
  loop_control:
    loop_var: project_item
    label: "{{ project_item.name }}"

- name: "{{ project_title }} - project_dir_rel"
  set_fact:
    project_dir_rel: "projects/{{ env_project_key }}"
    project_init: >-
      {{
        ((project.global_init | default('')) != '')
        | ternary(
          env.init[project.global_init | default('')],
          project.init
        )
      }}
    project_repo: >-
      {{
        ((project.global_repo | default('')) != '')
        | ternary(
          env.repo[project.global_repo | default('')],
          project.repo
        )
      }}
    project_repo_vault: >-
      {{
        ((project.global_repo_vault | default('')) != '')
        | ternary(
          env.repo_vault[project.global_repo_vault | default('')],
          project.repo_vault
        )
      }}

- name: "{{ project_title }} - verify the project init params"
  fail:
    msg: "container not specified for the project init params"
  when: (project_init.container | default('')) == ''

- name: "{{ project_title }} - project_container_type"
  set_fact:
    project_container_type: "{{ project_init.container_type | default('docker', true) }}"

- name: "{{ project_title }} - validate container_type"
  fail:
    msg: "container_type value invalid ({{ project_container_type }})"
  when: not (project_container_type in ['docker'])

- name: "{{ project_title }} - verify the project repo params"
  fail:
    msg: "{{ project_item }} not specified for the project repository"
  when: (project_repo[project_item] | default('')) == ''
  loop:
  - "env_dir"
  - "src"
  - "version"
  loop_control:
    loop_var: project_item

- name: "{{ project_title }} - define the project dirs and files"
  set_fact:
    project_base_dir: "/main/{{ project_dir_rel }}"
    project_secrets_dir: "/main/{{ project_dir_rel }}/secrets"
    project_init_dir: "/main/{{ project_dir_rel }}/init"
    project_repo_ssh_file: >-
      {{
        ((project_repo.ssh_file | default('')) != '')
        | ternary('ssh.key', '')
      }}
    project_repo_vault_file: >-
      {{
        ((project_repo_vault.file | default('')) != '')
        | ternary('vault', '')
      }}

- name: "{{ project_title }} - define the project init params"
  set_fact:
    project_init_params:
      key: "{{ env_project_key }}"
      root_dir: "{{ env_root_dir }}"
      dev: "{{ env_dev | default(false, true) }}"
      project_dir_rel: "{{ project_dir_rel }}"
      init:
        container: "{{ project_init.container }}"
        container_type: "{{ project_container_type }}"
        root: "{{ project_init.root | default(false, true) }}"
      repo:
        env_dir: "{{ project_repo.env_dir }}"
        src: "{{ project_repo.src }}"
        version: "{{ project_repo.version }}"
        ssh_file: "{{ project_repo_ssh_file }}"
      repo_vault:
        force: "{{ project_repo_vault.force | default(false, true) }}"
        file: "{{ project_repo_vault_file }}"

- name: "{{ project_title }} - create the project directories"
  file:
    path: "{{ project_base_dir }}/{{ project_item }}"
    state: directory
    mode: 0755
  loop:
  - "secrets"
  - "init"
  - "data"
  loop_control:
    loop_var: project_item

- name: "{{ project_title }} - copy ssh file"
  copy:
    src: "env-main/{{ project_repo.ssh_file }}"
    dest: "{{ project_secrets_dir }}/{{ project_repo_ssh_file }}"
    decrypt: "{{ project_repo.ssh_file_encrypted | default(false) | bool }}"
    mode: 0600
  when: project_repo_ssh_file != ''

- name: "{{ project_title }} - copy the vault file"
  copy:
    src: "env-main/{{ project_repo_vault.file }}"
    dest: "{{ project_secrets_dir }}/{{ project_repo_vault_file }}"
    mode: 0600
  when: project_repo_vault_file != ''

- name: "{{ project_title }} - create the project init config file"
  copy:
    content: "{{ project_init_params | to_nice_yaml }}"
    dest: "{{ project_init_dir }}/vars.yml"
    mode: 0600

- name: "{{ project_title }} - create the project init run file"
  template:
    src: "templates/init.tpl.sh"
    dest: "{{ project_init_dir }}/init.sh"
    mode: 0700
  vars:
    params: "{{ project_init_params }}"