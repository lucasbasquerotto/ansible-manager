- set_fact: 
    repo_dest: "{{ env.repo_base_dest_workspace }}/{{ repo.local_repo }}"
    repo_env_repo: "{{ (repo.global_env_repo | default(false)) | ternary(env.env_repo, repo.env_repo) }}"
    repo_base_dir_pod: "/main/pods"
    repo_base_dir_app: "/main/apps"
  tags: ["other", "no_print"]

- name: "[{{ repo.name }}] create the directories in {{ repo_dest }}"
  file:
    path: "{{ repo_item }}"
    state: directory
    mode: 0755
  loop: 
  - "{{ env.repo_base_dest }}/var"
  - "{{ repo_dest }}/env"
  - "{{ repo_dest }}/var"
  - "{{ repo_dest }}/tmp"
  loop_control:
    loop_var: repo_item
  tags: ["other"]

# env repository
  
- name: "[{{ repo.name }}] create file to verify idempotence (if there is still no file)"
  copy: 
    force: no
    content: ""
    dest: "{{ repo_dest }}/var/{{ repo.env_file }}"
    mode: 0600
  tags: ["other"]

- set_fact:
    repo_env_dest: >-
      {{ 
      (repo.env_repo is defined) |
      ternary(
      (main_dev | bool) | 
      ternary(
      repo.env_repo.local_dir | default('') | 
      ternary(main_env_repo_dest_base + '/' + (repo.env_repo.local_dir | default('')), ''), 
      repo_dest + '/env'
      ),
      repo.global_env_repo | default(false) | bool | ternary(main_env_repo_dest, ''),  
      )
      }}
  tags: ["other", "no_print"]

- name: "[{{ repo.name }}] fail - repo_env_dest"
  fail:
    msg: >-
      repo_env (specific or global) is not correctly defined for the
      repository [{{ repo.name }}]
  when: (repo_env_dest | default('')) == ''
  tags: ["other"]

- include_tasks: "tasks/git.yml"
  vars:
    git_title: "[{{ repo.name }}] - git env"
    git_repo_private: "{{ repo.env_repo.private | default(false) }}"
    git_repo_key_file_encrypted: "env/{{ repo.env_repo.key_file_encrypted }}"
    git_repo_src: "{{ repo.env_repo.src }}"
    git_repo_version: "{{ repo.env_repo.version }}"
    git_repo_key_file: "{{ repo_dest }}/var/repo.env.key_file"
    git_repo_accept_hostkey: yes
    git_repo_dest: "{{ repo_env_dest }}"
    git_repo_update: "{{ (main_dev | bool) | ternary('no', 'yes') }}"
    git_repo_force: no
    git_task_tags: ["other"]
  when: repo.env_repo is defined

# env vars

- name: "[{{ repo.name }}] load environment vars"
  include_vars:
    file: "{{ repo_env_dest }}/{{ repo.env_file }}"
    name: repo_env
  tags: ["other"]

# base environment directory

- block:

  - include_tasks: "tasks/git.yml"
    vars:
      git_title: "[{{ repo.name }}] - git env base"
      git_repo_private: "{{ repo_env.env.repo.private | default(false) }}"
      git_repo_key_file_encrypted: "env/{{ repo_env.env.repo.key_file_encrypted }}"
      git_repo_src: "{{ repo_env.env.repo.src }}"
      git_repo_version: "{{ repo_env.env.repo.version }}"
      git_repo_key_file: "{{ repo_dest }}/var/repo.env_base.key_file"
      git_repo_accept_hostkey: yes
      git_repo_dest: "{{ repo_env_dest }}/{{ repo_env.env.dest }}"
      git_repo_update: "{{ (main_dev | bool) | ternary('no', 'yes') }}"
      git_repo_force: no
      git_task_tags: ["other"]

  - name: >-
      [{{ repo.name }}] load base environment vars
      ({{ repo_env_dest }}/{{ repo_env.env.dest }}/{{ repo_env.env.file }})"
    include_vars:
      file: "{{ repo_env_dest }}/{{ repo_env.env.dest }}/{{ repo_env.env.file }}"
      name: repo_env_base
    tags: ["other"]
      
  - set_fact:
      repo_env: "{{ repo_env_base }}"
    when: repo_env.init is not defined
    tags: ["other", "no_print"]

  when: repo_env.env is defined

# cloud repository

- set_fact:
    repo_cloud_dest: >-
      {{ 
      (main_dev | bool) | 
      ternary(
      repo.local_cloud_dir | default('') | 
      ternary(main_cloud_repo_dest_base + '/' + (repo.local_cloud_dir | default('')), ''), 
      repo_dest + '/cloud'
      )
      }}
  tags: ["other", "no_print"]

- name: "[{{ repo.name }}] fail - repo_cloud_dest"
  fail:
    msg: "local_cloud_dir is not defined for the repository [{{ repo.name }}]"
  when: (repo_cloud_dest | default('')) == ''
  tags: ["other"]

- set_fact: 
    repo_cloud: "{{ repo_env.repos[repo_env.init.repo] }}"
  tags: ["other", "no_print"]

- include_tasks: "tasks/git.yml"
  vars:
    git_title: "[{{ repo.name }}] - git cloud ({{ repo_env.init.repo }})"
    git_repo_private: "{{ repo_cloud.private | default(false) }}"
    git_repo_key_file_encrypted: "{{ repo_env_dest }}/{{ repo_cloud.key_file_encrypted }}"
    git_repo_src: "{{ repo_cloud.src }}"
    git_repo_version: "{{ repo_cloud.version }}"
    git_repo_key_file: "{{ repo_dest }}/var/repo.cloud.key_file"
    git_repo_accept_hostkey: yes
    git_repo_dest: "{{ repo_cloud_dest }}"
    git_repo_update: "{{ (main_dev | bool) | ternary('no', 'yes') }}"
    git_repo_force: no
    git_task_tags: ["other"]

# hosts file (inventory)

- set_fact: 
    repo_hosts_file_src: >-
      {{ 
      repo_env.init.hosts_file | default('')
      | ternary(repo_env_dest + '/' + (repo_env.init.hosts_file | default('')), '')
      }}
    repo_hosts_content: "{{ repo_env.init.hosts_content | default('') }}"
  tags: ["other", "no_print"]

- name: "[{{ repo.name }}] ensure that there is a hosts file or content"
  fail:
    msg: "Enter a value for hosts_file or hosts_content"
  when: >-
    ((repo_hosts_file_src | default('')) == '') 
    and 
    ((repo_hosts_content | default('')) == '')
  tags: ["other"]

- name: "[{{ repo.name }}] ensure that there isn't a hosts file and a hosts content at once"
  fail:
    msg: "Enter a value for only one of hosts_file or hosts_content"
  when: >-
    ((repo_hosts_file_src | default('')) != '') 
    and 
    ((repo_hosts_content | default('')) != '')
  tags: ["other"]

- name: "[{{ repo.name }}] copy the hosts file temporarily to verify changes"
  copy:
    src: "{{ repo_hosts_file_src }}"
    dest: "{{ repo_dest }}/var/hosts.tmp"
    mode: 0600
  register: diff_hosts_file
  when: (repo_hosts_file_src | default('')) != ''
  tags: ["other"]

- name: "[{{ repo.name }}] copy the hosts content temporarily to verify changes"
  copy:
    content: "{{ repo_hosts_content }}"
    dest: "{{ repo_dest }}/var/hosts.tmp"
    mode: 0600
  register: diff_hosts_content
  when: (repo_hosts_content | default('')) != ''
  tags: ["other"]

- name: "[{{ repo.name }}] copy the hosts file when changed"
  copy:
    src: "{{ repo_dest }}/var/hosts.tmp"
    dest: "{{ repo_dest }}/var/hosts"
    mode: 0600
    force: "{{ diff_hosts_file.changed or diff_hosts_content.changed }}"
  tags: ["other"]

# executable files

- name: "[{{ repo.name }}] copy the executable files"
  template:
    src: "templates/run.tpl.sh"
    dest: "{{ repo_dest }}/{{ repo_item.name }}"
    mode: 0700
  vars:
    repo_run_force: "{{ repo_item.force }}"
    repo_force_vault: "{{ repo_env_repo.force_vault and not (repo_item.dev | default(false) | bool) }}"
    repo_env_dir: "{{ repo_env_dest }}"
    repo_cloud_repo_dest: "{{ repo_cloud_dest }}"
  loop:
  - { name: "run", force: "true" }
  - { name: "upgrade", force: "false" }
  - { name: "dev", force: "true", dev: true }
  loop_control:
    loop_var: repo_item
  tags: ["other"]

- name: "[{{ repo.name }}] copy the vault file"
  copy:
    src: "env/{{ repo_env_repo.vault_file }}"
    dest: "{{ repo_dest }}/var/vault"
    decrypt: yes
    mode: 0600
  when: (repo_env_repo.vault_file | default('')) != ''
  tags: ["other"]
  
- name: "[{{ repo.name }}] execute the commands of the local repositories (dev)"
  command: "{{ env.repo_base_dest_workspace }}/{{ repo.local_repo }}/dev"
  when: repo.local | default(false) | bool
  tags: ["never", "local"]